---
  - name: Install prerequisits for installation
    apt: name={{ item }} state=latest
    with_items:
      - apt-transport-https
      - ca-certificates
      - software-properties-common
  - name: add 3rd party apt repository keys
    apt_key: url='{{ item }}'
    with_items:
      - https://nginx.org/packages/keys/nginx_signing.key
      - https://www.postgresql.org/media/keys/ACCC4CF8.asc
      - https://www.rabbitmq.com/rabbitmq-signing-key-public.asc
      - https://www.rabbitmq.com/rabbitmq-release-signing-key.asc
      - https://download.docker.com/linux/debian/gpg
  - name: add 3rd party repositories
    apt_repository: repo='{{ item }}'
    with_items:
      - deb http://nginx.org/packages/debian/ stretch nginx
      - deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
      - deb http://www.rabbitmq.com/debian/ testing main
      - deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
  - name: update package list and upgrade
    apt: update_cache=yes upgrade=dist
  - name: install packages
    apt: name={{ item }} state=latest
    with_items:
      - nginx
      - certbot
      - sudo
      - ntp
      - ntpdate
      - python3.5
      - python3.5-dev
      - libpython3.5-dev
      - python-psycopg2
      - postgresql
      - libpq-dev
      - python-virtualenv
      - python-pip
      - libffi-dev
      - supervisor
      - gcc
      - git
      - rabbitmq-server
# Will probably be needed later
#      - redis-server
#      - docker-ce
#      - docker-compose
  - name: create db users
    postgresql_user: name={{ item.name }} password={{ item.password }} encrypted=yes role_attr_flags=NOCREATEDB,NOCREATEROLE,NOSUPERUSER
    become: yes
    become_user: postgres
    with_items:
# NOTE: generate password when generating project (should be in sync wih settings!)
      - { name: '{{ project_name }}', password: 'Kr230c9Nsc' }
  - name: create db
    postgresql_db: name={{ project_name }} owner={{ project_name }} encoding='UTF-8'
    become: yes
    become_user: postgres
  - name: create directories
    file: path={{ item.path }} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }} state=directory
    with_items:
      - { path: '/var/www/{{ project_name }}/', owner: 'www-data', group: 'www-data', mode: '775' }
      - { path: '/var/www/{{ project_name }}/media/', owner: 'www-data', group: 'www-data', mode: '775' }
      - { path: '/var/www/{{ project_name }}/.well-known/', owner: 'root', group: 'root', mode: '755' }
      - { path: '/var/log/{{ project_name }}/', owner: 'www-data', group: 'www-data', mode: '775' }
      - { path: '/usr/local/lib/{{ project_name }}/', owner: 'root', group: 'root', mode: '775' }
      - { path: '/var/lib/{{ project_name }}/celery', owner: 'nobody', group: 'nogroup', mode: '755' }
      - { path: '/var/run/{{ project_name }}/celery', owner: 'nobody', group: 'nogroup', mode: '755' }
  - name: upload config
    synchronize: dest={{ item.dest }} src={{ item.src }} owner=no group=no recursive=yes delete=yes
    with_items:
      - { dest: '/etc/nginx/', src: 'nginx/' }
      - { dest: '/etc/supervisor/conf.d/', src: 'supervisor/' }
    notify:
    - restart supervisor
  - name: deploy nginx config
    template: src={{ item.src }} dest={{ item.dest }}
    with_items:
      - { src: 'nginx/sites-available/{{project_name}}.j2', dest: '/etc/nginx/sites-available/{{project_name}}' }
      - { src: 'nginx/sites-available/secure.{{project_name}}.j2', dest: '/etc/nginx/sites-available/secure.{{project_name}}' }
    notify:
        - restart nginx
# Have to restart nginx here explicitly before we can obtain an SSL cert
  - name: restart nginx
    service: name=nginx state=restarted
  - name: generate SSL certificate with Let's encrypt certbot
    shell: certbot certonly --cert-name {{ domain_name }} -n --webroot -w /var/www/{{project_name}}/ -m {{ letsencrypt_email }} --agree-tos -d {{ domain_name }} {% if domain_list is defined and domain_list %} -d {{ domain_list | join(",") }} {% endif %}
    args:
      creates: /etc/letsencrypt/{{ domain_name }}
  - name: Link/activate https web server config
    file: path=/etc/nginx/sites-enabled/secure.{{project_name}} src=/etc/nginx/sites-available/secure.{{project_name}} state=link
    notify:
    - restart nginx
  - name: Add cron job to auto-renew SSL certificate
    cron:
      name: letsencrypt
      special_time: weekly
      job: /usr/bin/certbot renew && /usr/sbin/service nginx reload
